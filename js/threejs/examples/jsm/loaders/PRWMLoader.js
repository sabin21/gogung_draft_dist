import{BufferAttribute,BufferGeometry,FileLoader,Loader}from"../../../build/three.module.js";var PRWMLoader=function(){var r=null;function e(){if(null===r){var e=new ArrayBuffer(2),t=new Uint8Array(e),n=new Uint16Array(e);t[0]=170,t[1]=187,r=43707===n[0]}return r}var t=[null,Float32Array,null,Int8Array,Int16Array,null,Int32Array,Uint8Array,Uint16Array,null,Uint32Array],n={Uint16Array:"getUint16",Uint32Array:"getUint32",Int16Array:"getInt16",Int32Array:"getInt32",Float32Array:"getFloat32",Float64Array:"getFloat64"};function a(r,t,a,i,o){var u,l=t.BYTES_PER_ELEMENT;if(o===e()||1===l)u=new t(r,a,i);else{var f=new DataView(r,a,i*l),d=n[t.name],s=!o,c=0;for(u=new t(i);c<i;c++)u[c]=f[d](c*l,s)}return u}function i(r){Loader.call(this,r)}return i.prototype=Object.assign(Object.create(Loader.prototype),{constructor:i,load:function(r,t,n,a){var i=this,o=new FileLoader(i.manager);o.setPath(i.path),o.setResponseType("arraybuffer"),r=r.replace(/\*/g,e()?"be":"le"),o.load(r,(function(r){t(i.parse(r))}),n,a)},parse:function(r){var e,n,i=function(r){var e=new Uint8Array(r),n=e[0],i=e[1],o=!!(i>>7&1),u=i>>6&1,l=1==(i>>5&1),f=31&i,d=0,s=0;if(l?(d=(e[2]<<16)+(e[3]<<8)+e[4],s=(e[5]<<16)+(e[6]<<8)+e[7]):(d=e[2]+(e[3]<<8)+(e[4]<<16),s=e[5]+(e[6]<<8)+(e[7]<<16)),0===n)throw new Error("PRWM decoder: Invalid format version: 0");if(1!==n)throw new Error("PRWM decoder: Unsupported format version: "+n);if(!o){if(0!==u)throw new Error("PRWM decoder: Indices type must be set to 0 for non-indexed geometries");if(0!==s)throw new Error("PRWM decoder: Number of indices must be set to 0 for non-indexed geometries")}var c,y,A,w,m,b,p,v,g=8,E={};for(v=0;v<f;v++){for(c="";g<e.length&&(y=e[g],g++,0!==y);)c+=String.fromCharCode(y);A=(i=e[g])>>7&1,w=1+(i>>4&3),g++,b=a(r,m=t[15&i],g=4*Math.ceil(g/4),w*d,l),g+=m.BYTES_PER_ELEMENT*w*d,E[c]={type:A,cardinality:w,values:b}}return g=4*Math.ceil(g/4),p=null,o&&(p=a(r,1===u?Uint32Array:Uint16Array,g,s,l)),{version:n,attributes:E,indices:p}}(r),o=Object.keys(i.attributes),u=new BufferGeometry;for(n=0;n<o.length;n++)e=i.attributes[o[n]],u.addAttribute(o[n],new BufferAttribute(e.values,e.cardinality,e.normalized));return null!==i.indices&&u.setIndex(new BufferAttribute(i.indices,1)),u}}),i.isBigEndianPlatform=function(){return e()},i}();export{PRWMLoader};