import{CompressedTexture,FileLoader,LinearFilter,LinearMipmapLinearFilter,Loader,RGBA_ASTC_4x4_Format,RGBA_PVRTC_4BPPV1_Format,RGB_ETC1_Format,RGB_PVRTC_4BPPV1_Format,UnsignedByteType}from"../../../build/three.module.js";var BasisTextureLoader=function(e){Loader.call(this,e),this.transcoderPath="",this.transcoderBinary=null,this.transcoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.workerConfig={format:null,astcSupported:!1,etcSupported:!1,dxtSupported:!1,pvrtcSupported:!1}};BasisTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:BasisTextureLoader,setTranscoderPath:function(e){return this.transcoderPath=e,this},setWorkerLimit:function(e){return this.workerLimit=e,this},detectSupport:function(e){var r=this.workerConfig;if(r.astcSupported=!!e.extensions.get("WEBGL_compressed_texture_astc"),r.etcSupported=!!e.extensions.get("WEBGL_compressed_texture_etc1"),r.dxtSupported=!!e.extensions.get("WEBGL_compressed_texture_s3tc"),r.pvrtcSupported=!!e.extensions.get("WEBGL_compressed_texture_pvrtc")||!!e.extensions.get("WEBKIT_WEBGL_compressed_texture_pvrtc"),r.astcSupported)r.format=BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;else if(r.dxtSupported)r.format=BasisTextureLoader.BASIS_FORMAT.cTFBC3;else if(r.pvrtcSupported)r.format=BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;else{if(!r.etcSupported)throw new Error("THREE.BasisTextureLoader: No suitable compressed texture format found.");r.format=BasisTextureLoader.BASIS_FORMAT.cTFETC1}return this},load:function(e,r,t,s){var a=new FileLoader(this.manager);a.setResponseType("arraybuffer"),a.load(e,(e=>{this._createTexture(e).then(r).catch(s)}),t,s)},_createTexture:function(e){var r,t,s=this._getWorker().then((s=>(r=s,t=this.workerNextTaskID++,new Promise(((s,a)=>{r._callbacks[t]={resolve:s,reject:a},r._taskCosts[t]=e.byteLength,r._taskLoad+=r._taskCosts[t],r.postMessage({type:"transcode",id:t,buffer:e},[e])}))))).then((e=>{var r,t=this.workerConfig,{width:s,height:a,mipmaps:o,format:i}=e;switch(i){case BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:r=new CompressedTexture(o,s,a,RGBA_ASTC_4x4_Format);break;case BasisTextureLoader.BASIS_FORMAT.cTFBC1:case BasisTextureLoader.BASIS_FORMAT.cTFBC3:r=new CompressedTexture(o,s,a,BasisTextureLoader.DXT_FORMAT_MAP[t.format],UnsignedByteType);break;case BasisTextureLoader.BASIS_FORMAT.cTFETC1:r=new CompressedTexture(o,s,a,RGB_ETC1_Format);break;case BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:r=new CompressedTexture(o,s,a,RGB_PVRTC_4BPPV1_Format);break;case BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:r=new CompressedTexture(o,s,a,RGBA_PVRTC_4BPPV1_Format);break;default:throw new Error("THREE.BasisTextureLoader: No supported format available.")}return r.minFilter=1===o.length?LinearFilter:LinearMipmapLinearFilter,r.magFilter=LinearFilter,r.generateMipmaps=!1,r.needsUpdate=!0,r}));return s.finally((()=>{r&&t&&(r._taskLoad-=r._taskCosts[t],delete r._callbacks[t],delete r._taskCosts[t])})),s},_initTranscoder:function(){if(!this.transcoderBinary){var e=new FileLoader(this.manager);e.setPath(this.transcoderPath);var r=new Promise(((r,t)=>{e.load("basis_transcoder.js",r,void 0,t)})),t=new FileLoader(this.manager);t.setPath(this.transcoderPath),t.setResponseType("arraybuffer");var s=new Promise(((e,r)=>{t.load("basis_transcoder.wasm",e,void 0,r)}));this.transcoderPending=Promise.all([r,s]).then((([e,r])=>{var t=BasisTextureLoader.BasisWorker.toString(),s=["/* basis_transcoder.js */",e,"/* worker */",t.substring(t.indexOf("{")+1,t.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([s])),this.transcoderBinary=r}))}return this.transcoderPending},_getWorker:function(){return this._initTranscoder().then((()=>{if(this.workerPool.length<this.workerLimit){var e=new Worker(this.workerSourceURL);e._callbacks={},e._taskCosts={},e._taskLoad=0,e.postMessage({type:"init",config:this.workerConfig,transcoderBinary:this.transcoderBinary}),e.onmessage=function(r){var t=r.data;switch(t.type){case"transcode":e._callbacks[t.id].resolve(t);break;case"error":e._callbacks[t.id].reject(t);break;default:console.error('THREE.BasisTextureLoader: Unexpected message, "'+t.type+'"')}},this.workerPool.push(e)}else this.workerPool.sort((function(e,r){return e._taskLoad>r._taskLoad?-1:1}));return this.workerPool[this.workerPool.length-1]}))},dispose:function(){for(var e=0;e<this.workerPool.length;e++)this.workerPool[e].terminate();return this.workerPool.length=0,this}}),BasisTextureLoader.BASIS_FORMAT={cTFETC1:0,cTFETC2:1,cTFBC1:2,cTFBC3:3,cTFBC4:4,cTFBC5:5,cTFBC7_M6_OPAQUE_ONLY:6,cTFBC7_M5:7,cTFPVRTC1_4_RGB:8,cTFPVRTC1_4_RGBA:9,cTFASTC_4x4:10,cTFATC_RGB:11,cTFATC_RGBA_INTERPOLATED_ALPHA:12,cTFRGBA32:13,cTFRGB565:14,cTFBGR565:15,cTFRGBA4444:16},BasisTextureLoader.DXT_FORMAT={COMPRESSED_RGB_S3TC_DXT1_EXT:33776,COMPRESSED_RGBA_S3TC_DXT1_EXT:33777,COMPRESSED_RGBA_S3TC_DXT3_EXT:33778,COMPRESSED_RGBA_S3TC_DXT5_EXT:33779},BasisTextureLoader.DXT_FORMAT_MAP={},BasisTextureLoader.DXT_FORMAT_MAP[BasisTextureLoader.BASIS_FORMAT.cTFBC1]=BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT,BasisTextureLoader.DXT_FORMAT_MAP[BasisTextureLoader.BASIS_FORMAT.cTFBC3]=BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT,BasisTextureLoader.BasisWorker=function(){var e,r,t;onmessage=function(s){var a,o,i=s.data;switch(i.type){case"init":e=i.config,a=i.transcoderBinary,r=new Promise((e=>{o={wasmBinary:a,onRuntimeInitialized:e},BASIS(o)})).then((()=>{var{BasisFile:e,initializeBasis:r}=o;t=e,r()}));break;case"transcode":r.then((()=>{try{for(var{width:r,height:s,hasAlpha:a,mipmaps:o,format:n}=function(r){var s=new t(new Uint8Array(r)),a=s.getImageWidth(0,0),o=s.getImageHeight(0,0),i=s.getNumLevels(0),n=s.getHasAlpha();function T(){s.close(),s.delete()}if(n||9!==e.format||(e.format=8),!a||!o||!i)throw T(),new Error("THREE.BasisTextureLoader:  Invalid .basis file");if(!s.startTranscoding())throw T(),new Error("THREE.BasisTextureLoader: .startTranscoding failed");for(var d=[],c=0;c<i;c++){var _=s.getImageWidth(0,c),u=s.getImageHeight(0,c),B=new Uint8Array(s.getImageTranscodedSizeInBytes(0,c,e.format));if(!s.transcodeImage(B,0,c,e.format,n,0))throw T(),new Error("THREE.BasisTextureLoader: .transcodeImage failed.");d.push({data:B,width:_,height:u})}return T(),{width:a,height:o,hasAlpha:n,mipmaps:d,format:e.format}}(i.buffer),T=[],d=0;d<o.length;++d)T.push(o[d].data.buffer);self.postMessage({type:"transcode",id:i.id,width:r,height:s,hasAlpha:a,mipmaps:o,format:n},T)}catch(e){console.error(e),self.postMessage({type:"error",id:i.id,error:e.message})}}))}}};export{BasisTextureLoader};