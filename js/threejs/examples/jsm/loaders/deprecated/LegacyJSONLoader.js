import{AdditiveBlending,AnimationClip,BackSide,Color,CustomBlending,DoubleSide,Face3,FaceColors,FileLoader,Geometry,Loader,LoaderUtils,MaterialLoader,Math as _Math,MirroredRepeatWrapping,MultiplyBlending,NoBlending,NormalBlending,RepeatWrapping,SubtractiveBlending,TextureLoader,Vector2,Vector3,Vector4,VertexColors}from"../../../../build/three.module.js";var LegacyJSONLoader=function(){function e(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),Loader.call(this,e),this.withCredentials=!1}return e.prototype=Object.assign(Object.create(Loader.prototype),{constructor:e,load:function(e,a,r,s){var t=this,o=""===this.path?LoaderUtils.extractUrlBase(e):this.path,i=new FileLoader(this.manager);i.setPath(this.path),i.setWithCredentials(this.withCredentials),i.load(e,(function(r){var s=JSON.parse(r),i=s.metadata;if(void 0!==i){var p=i.type;if(void 0!==p&&"object"===p.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.")}var n=t.parse(s,o);a(n.geometry,n.materials)}),r,s)},parse:function(){var e={NoBlending,NormalBlending,AdditiveBlending,SubtractiveBlending,MultiplyBlending,CustomBlending},a=new Color,r=new TextureLoader,s=new MaterialLoader;function t(r,t,i,p){var n={},c={uuid:_Math.generateUUID(),type:"MeshLambertMaterial"};for(var l in r){var m=r[l];switch(l){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"DbgName":c.name=m;break;case"blending":c.blending=e[m];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.LegacyJSONLoader.createMaterial:",l,"is no longer supported.");break;case"colorDiffuse":c.color=a.fromArray(m).getHex();break;case"colorSpecular":c.specular=a.fromArray(m).getHex();break;case"colorEmissive":c.emissive=a.fromArray(m).getHex();break;case"specularCoef":c.shininess=m;break;case"shading":"basic"===m.toLowerCase()&&(c.type="MeshBasicMaterial"),"phong"===m.toLowerCase()&&(c.type="MeshPhongMaterial"),"standard"===m.toLowerCase()&&(c.type="MeshStandardMaterial");break;case"mapDiffuse":c.map=o(m,r.mapDiffuseRepeat,r.mapDiffuseOffset,r.mapDiffuseWrap,r.mapDiffuseAnisotropy,n,t,i,p);break;case"mapEmissive":c.emissiveMap=o(m,r.mapEmissiveRepeat,r.mapEmissiveOffset,r.mapEmissiveWrap,r.mapEmissiveAnisotropy,n,t,i,p);break;case"mapLight":c.lightMap=o(m,r.mapLightRepeat,r.mapLightOffset,r.mapLightWrap,r.mapLightAnisotropy,n,t,i,p);break;case"mapAO":c.aoMap=o(m,r.mapAORepeat,r.mapAOOffset,r.mapAOWrap,r.mapAOAnisotropy,n,t,i,p);break;case"mapBump":c.bumpMap=o(m,r.mapBumpRepeat,r.mapBumpOffset,r.mapBumpWrap,r.mapBumpAnisotropy,n,t,i,p);break;case"mapBumpScale":c.bumpScale=m;break;case"mapNormal":c.normalMap=o(m,r.mapNormalRepeat,r.mapNormalOffset,r.mapNormalWrap,r.mapNormalAnisotropy,n,t,i,p);break;case"mapNormalFactor":c.normalScale=m;break;case"mapSpecular":c.specularMap=o(m,r.mapSpecularRepeat,r.mapSpecularOffset,r.mapSpecularWrap,r.mapSpecularAnisotropy,n,t,i,p);break;case"mapMetalness":c.metalnessMap=o(m,r.mapMetalnessRepeat,r.mapMetalnessOffset,r.mapMetalnessWrap,r.mapMetalnessAnisotropy,n,t,i,p);break;case"mapRoughness":c.roughnessMap=o(m,r.mapRoughnessRepeat,r.mapRoughnessOffset,r.mapRoughnessWrap,r.mapRoughnessAnisotropy,n,t,i,p);break;case"mapAlpha":c.alphaMap=o(m,r.mapAlphaRepeat,r.mapAlphaOffset,r.mapAlphaWrap,r.mapAlphaAnisotropy,n,t,i,p);break;case"flipSided":c.side=BackSide;break;case"doubleSided":c.side=DoubleSide;break;case"transparency":console.warn("THREE.LegacyJSONLoader.createMaterial: transparency has been renamed to opacity"),c.opacity=m;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":c[l]=m;break;case"vertexColors":!0===m&&(c.vertexColors=VertexColors),"face"===m&&(c.vertexColors=FaceColors);break;default:console.error("THREE.LegacyJSONLoader.createMaterial: Unsupported",l,m)}}return"MeshBasicMaterial"===c.type&&delete c.emissive,"MeshPhongMaterial"!==c.type&&delete c.specular,c.opacity<1&&(c.transparent=!0),s.setTextures(n),s.parse(c)}function o(e,a,s,t,o,i,p,n,c){var l,m=p+e,h=c.getHandler(m);null!==h?l=h.load(m):(r.setCrossOrigin(n),l=r.load(m)),void 0!==a&&(l.repeat.fromArray(a),1!==a[0]&&(l.wrapS=RepeatWrapping),1!==a[1]&&(l.wrapT=RepeatWrapping)),void 0!==s&&l.offset.fromArray(s),void 0!==t&&("repeat"===t[0]&&(l.wrapS=RepeatWrapping),"mirror"===t[0]&&(l.wrapS=MirroredRepeatWrapping),"repeat"===t[1]&&(l.wrapT=RepeatWrapping),"mirror"===t[1]&&(l.wrapT=MirroredRepeatWrapping)),void 0!==o&&(l.anisotropy=o);var f=_Math.generateUUID();return i[f]=l,f}return function(e,a){void 0!==e.data&&(e=e.data),void 0!==e.scale?e.scale=1/e.scale:e.scale=1;var r=new Geometry;return function(e,a){function r(e,a){return e&1<<a}var s,t,o,i,p,n,c,l,m,h,f,u,d,g,v,b,y,A,k,M,R,O,W,w,L,S,x,C=e.faces,B=e.vertices,N=e.normals,T=e.colors,E=e.scale,V=0;if(void 0!==e.uvs){for(s=0;s<e.uvs.length;s++)e.uvs[s].length&&V++;for(s=0;s<V;s++)a.faceVertexUvs[s]=[]}for(i=0,p=B.length;i<p;)(A=new Vector3).x=B[i++]*E,A.y=B[i++]*E,A.z=B[i++]*E,a.vertices.push(A);for(i=0,p=C.length;i<p;)if(f=r(h=C[i++],0),u=r(h,1),d=r(h,3),g=r(h,4),v=r(h,5),b=r(h,6),y=r(h,7),f){if((M=new Face3).a=C[i],M.b=C[i+1],M.c=C[i+3],(R=new Face3).a=C[i+1],R.b=C[i+2],R.c=C[i+3],i+=4,u&&(m=C[i++],M.materialIndex=m,R.materialIndex=m),o=a.faces.length,d)for(s=0;s<V;s++)for(w=e.uvs[s],a.faceVertexUvs[s][o]=[],a.faceVertexUvs[s][o+1]=[],t=0;t<4;t++)S=w[2*(l=C[i++])],x=w[2*l+1],L=new Vector2(S,x),2!==t&&a.faceVertexUvs[s][o].push(L),0!==t&&a.faceVertexUvs[s][o+1].push(L);if(g&&(c=3*C[i++],M.normal.set(N[c++],N[c++],N[c]),R.normal.copy(M.normal)),v)for(s=0;s<4;s++)c=3*C[i++],W=new Vector3(N[c++],N[c++],N[c]),2!==s&&M.vertexNormals.push(W),0!==s&&R.vertexNormals.push(W);if(b&&(O=T[n=C[i++]],M.color.setHex(O),R.color.setHex(O)),y)for(s=0;s<4;s++)O=T[n=C[i++]],2!==s&&M.vertexColors.push(new Color(O)),0!==s&&R.vertexColors.push(new Color(O));a.faces.push(M),a.faces.push(R)}else{if((k=new Face3).a=C[i++],k.b=C[i++],k.c=C[i++],u&&(m=C[i++],k.materialIndex=m),o=a.faces.length,d)for(s=0;s<V;s++)for(w=e.uvs[s],a.faceVertexUvs[s][o]=[],t=0;t<3;t++)S=w[2*(l=C[i++])],x=w[2*l+1],L=new Vector2(S,x),a.faceVertexUvs[s][o].push(L);if(g&&(c=3*C[i++],k.normal.set(N[c++],N[c++],N[c])),v)for(s=0;s<3;s++)c=3*C[i++],W=new Vector3(N[c++],N[c++],N[c]),k.vertexNormals.push(W);if(b&&(n=C[i++],k.color.setHex(T[n])),y)for(s=0;s<3;s++)n=C[i++],k.vertexColors.push(new Color(T[n]));a.faces.push(k)}}(e,r),function(e,a){var r=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var s=0,t=e.skinWeights.length;s<t;s+=r){var o=e.skinWeights[s],i=r>1?e.skinWeights[s+1]:0,p=r>2?e.skinWeights[s+2]:0,n=r>3?e.skinWeights[s+3]:0;a.skinWeights.push(new Vector4(o,i,p,n))}if(e.skinIndices)for(s=0,t=e.skinIndices.length;s<t;s+=r){var c=e.skinIndices[s],l=r>1?e.skinIndices[s+1]:0,m=r>2?e.skinIndices[s+2]:0,h=r>3?e.skinIndices[s+3]:0;a.skinIndices.push(new Vector4(c,l,m,h))}a.bones=e.bones,a.bones&&a.bones.length>0&&(a.skinWeights.length!==a.skinIndices.length||a.skinIndices.length!==a.vertices.length)&&console.warn("When skinning, number of vertices ("+a.vertices.length+"), skinIndices ("+a.skinIndices.length+"), and skinWeights ("+a.skinWeights.length+") should match.")}(e,r),function(e,a){var r=e.scale;if(void 0!==e.morphTargets)for(var s=0,t=e.morphTargets.length;s<t;s++){a.morphTargets[s]={},a.morphTargets[s].name=e.morphTargets[s].name,a.morphTargets[s].vertices=[];for(var o=a.morphTargets[s].vertices,i=e.morphTargets[s].vertices,p=0,n=i.length;p<n;p+=3){var c=new Vector3;c.x=i[p]*r,c.y=i[p+1]*r,c.z=i[p+2]*r,o.push(c)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var l=a.faces,m=e.morphColors[0].colors;for(s=0,t=l.length;s<t;s++)l[s].color.fromArray(m,3*s)}}(e,r),function(e,a){var r=[],s=[];void 0!==e.animation&&s.push(e.animation),void 0!==e.animations&&(e.animations.length?s=s.concat(e.animations):s.push(e.animations));for(var t=0;t<s.length;t++){var o=AnimationClip.parseAnimation(s[t],a.bones);o&&r.push(o)}if(a.morphTargets){var i=AnimationClip.CreateClipsFromMorphTargetSequences(a.morphTargets,10);r=r.concat(i)}r.length>0&&(a.animations=r)}(e,r),r.computeFaceNormals(),r.computeBoundingSphere(),void 0===e.materials||0===e.materials.length?{geometry:r}:{geometry:r,materials:function(e,a,r,s){for(var o=[],i=0;i<e.length;++i)o[i]=t(e[i],a,r,s);return o}(e.materials,this.resourcePath||a,this.crossOrigin,this.manager)}}}()}),e}();export{LegacyJSONLoader};