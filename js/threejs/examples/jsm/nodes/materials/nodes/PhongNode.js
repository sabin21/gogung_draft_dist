import{UniformsLib,UniformsUtils}from"../../../../../build/three.module.js";import{Node}from"../../core/Node.js";import{ColorNode}from"../../inputs/ColorNode.js";import{FloatNode}from"../../inputs/FloatNode.js";function PhongNode(){Node.call(this),this.color=new ColorNode(15658734),this.specular=new ColorNode(1118481),this.shininess=new FloatNode(30)}PhongNode.prototype=Object.create(Node.prototype),PhongNode.prototype.constructor=PhongNode,PhongNode.prototype.nodeType="Phong",PhongNode.prototype.build=function(e){var i;if(e.define("PHONG"),e.requires.lights=!0,e.isShader("vertex")){var t=this.position?this.position.analyzeAndFlow(e,"v3",{cache:"position"}):void 0;e.mergeUniform(UniformsUtils.merge([UniformsLib.fog,UniformsLib.lights])),e.addParsCode(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif","#include <fog_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","#include <clipping_planes_pars_vertex>"].join("\n"));var o=["#include <beginnormal_vertex>","#include <morphnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif","#include <begin_vertex>"];t&&o.push(t.code,t.result?"transformed = "+t.result+";":""),o.push("\t#include <morphtarget_vertex>","\t#include <skinning_vertex>","\t#include <project_vertex>","\t#include <fog_vertex>","\t#include <logdepthbuf_vertex>","\t#include <clipping_planes_vertex>","\tvViewPosition = - mvPosition.xyz;","\t#include <worldpos_vertex>","\t#include <shadowmap_vertex>","\t#include <fog_vertex>"),i=o.join("\n")}else{this.mask&&this.mask.analyze(e),this.color.analyze(e,{slot:"color"}),this.specular.analyze(e),this.shininess.analyze(e),this.alpha&&this.alpha.analyze(e),this.normal&&this.normal.analyze(e),this.light&&this.light.analyze(e,{cache:"light"}),this.ao&&this.ao.analyze(e),this.ambient&&this.ambient.analyze(e),this.shadow&&this.shadow.analyze(e),this.emissive&&this.emissive.analyze(e,{slot:"emissive"}),this.environment&&this.environment.analyze(e,{slot:"environment"}),this.environmentAlpha&&this.environment&&this.environmentAlpha.analyze(e);var s=this.mask?this.mask.flow(e,"b"):void 0,n=this.color.flow(e,"c",{slot:"color"}),r=this.specular.flow(e,"c"),l=this.shininess.flow(e,"f"),h=this.alpha?this.alpha.flow(e,"f"):void 0,a=this.normal?this.normal.flow(e,"v3"):void 0,d=this.light?this.light.flow(e,"v3",{cache:"light"}):void 0,u=this.ao?this.ao.flow(e,"f"):void 0,c=this.ambient?this.ambient.flow(e,"c"):void 0,p=this.shadow?this.shadow.flow(e,"c"):void 0,m=this.emissive?this.emissive.flow(e,"c",{slot:"emissive"}):void 0,f=this.environment?this.environment.flow(e,"c",{slot:"environment"}):void 0,g=this.environmentAlpha&&this.environment?this.environmentAlpha.flow(e,"f"):void 0;e.requires.transparent=void 0!==h,e.addParsCode(["#include <fog_pars_fragment>","#include <bsdfs>","#include <lights_pars_begin>","#include <lights_phong_pars_fragment>","#include <shadowmap_pars_fragment>","#include <logdepthbuf_pars_fragment>"].join("\n")),o=["#include <normal_fragment_begin>","\tBlinnPhongMaterial material;"],s&&o.push(s.code,"if ( ! "+s.result+" ) discard;"),o.push(n.code,"\tvec3 diffuseColor = "+n.result+";","\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );","#include <logdepthbuf_fragment>",r.code,"\tvec3 specular = "+r.result+";",l.code,"\tfloat shininess = max( 0.0001, "+l.result+" );","\tfloat specularStrength = 1.0;"),h&&o.push(h.code,"#ifdef ALPHATEST","if ( "+h.result+" <= ALPHATEST ) discard;","#endif"),a&&o.push(a.code,"normal = "+a.result+";"),o.push("material.diffuseColor = "+(d?"vec3( 1.0 )":"diffuseColor")+";"),o.push("material.specularColor = specular;","material.specularShininess = shininess;","material.specularStrength = specularStrength;","#include <lights_fragment_begin>","#include <lights_fragment_end>"),d&&(o.push(d.code,"reflectedLight.directDiffuse = "+d.result+";"),o.push("reflectedLight.directDiffuse *= diffuseColor;","reflectedLight.indirectDiffuse *= diffuseColor;")),u&&o.push(u.code,"reflectedLight.indirectDiffuse *= "+u.result+";"),c&&o.push(c.code,"reflectedLight.indirectDiffuse += "+c.result+";"),p&&o.push(p.code,"reflectedLight.directDiffuse *= "+p.result+";","reflectedLight.directSpecular *= "+p.result+";"),m&&o.push(m.code,"reflectedLight.directDiffuse += "+m.result+";"),o.push("vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular;"),f&&(o.push(f.code),g?o.push(g.code,"outgoingLight = mix( outgoingLight, "+f.result+", "+g.result+" );"):o.push("outgoingLight = "+f.result+";")),h?o.push("gl_FragColor = vec4( outgoingLight, "+h.result+" );"):o.push("gl_FragColor = vec4( outgoingLight, 1.0 );"),o.push("#include <premultiplied_alpha_fragment>","#include <tonemapping_fragment>","#include <encodings_fragment>","#include <fog_fragment>"),i=o.join("\n")}return i},PhongNode.prototype.copy=function(e){return Node.prototype.copy.call(this,e),e.position&&(this.position=e.position),this.color=e.color,this.specular=e.specular,this.shininess=e.shininess,e.mask&&(this.mask=e.mask),e.alpha&&(this.alpha=e.alpha),e.normal&&(this.normal=e.normal),e.light&&(this.light=e.light),e.shadow&&(this.shadow=e.shadow),e.ao&&(this.ao=e.ao),e.emissive&&(this.emissive=e.emissive),e.ambient&&(this.ambient=e.ambient),e.environment&&(this.environment=e.environment),e.environmentAlpha&&(this.environmentAlpha=e.environmentAlpha),this},PhongNode.prototype.toJSON=function(e){var i=this.getJSONNode(e);return i||(i=this.createJSONNode(e),this.position&&(i.position=this.position.toJSON(e).uuid),i.color=this.color.toJSON(e).uuid,i.specular=this.specular.toJSON(e).uuid,i.shininess=this.shininess.toJSON(e).uuid,this.mask&&(i.mask=this.mask.toJSON(e).uuid),this.alpha&&(i.alpha=this.alpha.toJSON(e).uuid),this.normal&&(i.normal=this.normal.toJSON(e).uuid),this.light&&(i.light=this.light.toJSON(e).uuid),this.ao&&(i.ao=this.ao.toJSON(e).uuid),this.ambient&&(i.ambient=this.ambient.toJSON(e).uuid),this.shadow&&(i.shadow=this.shadow.toJSON(e).uuid),this.emissive&&(i.emissive=this.emissive.toJSON(e).uuid),this.environment&&(i.environment=this.environment.toJSON(e).uuid),this.environmentAlpha&&(i.environmentAlpha=this.environmentAlpha.toJSON(e).uuid)),i};export{PhongNode};