import{BackSide}from"../../../../build/three.module.js";import{TempNode}from"../core/TempNode.js";import{Vector2Node}from"../inputs/Vector2Node.js";import{FunctionNode}from"../core/FunctionNode.js";import{UVNode}from"../accessors/UVNode.js";import{NormalNode}from"../accessors/NormalNode.js";import{PositionNode}from"../accessors/PositionNode.js";function NormalMapNode(e,o){TempNode.call(this,"v3"),this.value=e,this.scale=o||new Vector2Node(1,1)}NormalMapNode.Nodes={perturbNormal2Arb:new FunctionNode("vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 map, vec2 vUv, vec2 normalScale ) {\n\n\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\tvec2 st0 = dFdx( vUv.st );\n\tvec2 st1 = dFdy( vUv.st );\n\n\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\tvec3 N = normalize( surf_norm );\n\n\tvec3 mapN = map * 2.0 - 1.0;\n\n\tmapN.xy *= normalScale;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\t// Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n\t\tif ( dot( cross( S, T ), N ) < 0.0 ) mapN.xy *= - 1.0;\n\n\t#else\n\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t#endif\n\n\tmat3 tsn = mat3( S, T, N );\n\treturn normalize( tsn * mapN );\n\n}",null,{derivatives:!0})},NormalMapNode.prototype=Object.create(TempNode.prototype),NormalMapNode.prototype.constructor=NormalMapNode,NormalMapNode.prototype.nodeType="NormalMap",NormalMapNode.prototype.generate=function(e,o){if(e.isShader("fragment")){var t=e.include(NormalMapNode.Nodes.perturbNormal2Arb);this.normal=this.normal||new NormalNode,this.position=this.position||new PositionNode(PositionNode.VIEW),this.uv=this.uv||new UVNode;var r=this.scale.build(e,"v2");return e.material.side===BackSide&&(r="-"+r),e.format(t+"( -"+this.position.build(e,"v3")+", "+this.normal.build(e,"v3")+", "+this.value.build(e,"v3")+", "+this.uv.build(e,"v2")+", "+r+" )",this.getType(e),o)}return console.warn("THREE.NormalMapNode is not compatible with "+e.shader+" shader."),e.format("vec3( 0.0 )",this.getType(e),o)},NormalMapNode.prototype.copy=function(e){return TempNode.prototype.copy.call(this,e),this.value=e.value,this.scale=e.scale,this},NormalMapNode.prototype.toJSON=function(e){var o=this.getJSONNode(e);return o||((o=this.createJSONNode(e)).value=this.value.toJSON(e).uuid,o.scale=this.scale.toJSON(e).uuid),o};export{NormalMapNode};